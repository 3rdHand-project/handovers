#!/usr/bin/env python
from reba_optim.reba_assess import RebaAssess
from sensor_msgs.msg import JointState
import plotly.plotly as py
from plotly.graph_objs import *
import plotly.tools as tls
import rospy
import numpy as np


class RebaCalculator(object):
    def __init__(self):
        self.reba = RebaAssess(save_score=True)
        self.reba_values = []
        self.reba_buffer = []
        self.buffer_size = 5
        self.max_time_reset = rospy.Duration(5)
        self.last_time_message = rospy.get_rostime()
        self.init_plotly_streaming()

    def init_plotly_streaming(self):
        stream_ids = tls.get_credentials_file()['stream_ids']
        # Get stream id from stream id list
        self.stream_id = stream_ids[0]
        # Make instance of stream id object
        stream = Stream(
            token=self.stream_id,  # (!) link stream id to 'token' key
            maxpoints=10     # (!) keep a max of 80 pts on screen
        )
        # Initialize trace of streaming plot by embedding the unique stream_id
        trace1 = Scatter(
            x=[],
            y=[],
            mode='lines+markers',
            stream=stream         # (!) embed stream id, 1 per trace
        )
        data = Data([trace1])
        # Add title to layout object
        layout = Layout(title='Reba Score',
                        yaxis=dict(
                            range=[0, 10]
                            )
                        )
        # Make a figure object
        fig = Figure(data=data, layout=layout)
        # (@) Send fig to Plotly, initialize streaming plot, open new tab
        unique_url = py.plot(fig, filename='reba_score')
        # open plotly stream
        self.plot_stream = py.Stream(self.stream_id)
        self.plot_stream.open()

    def reset_stream(self):
        self.reba_values = []
        self.reba_buffer = []
        self.plot_stream.write(dict(x=[], y=[]))

    def handle_joint_state_msgs(self, msg):
        # check with latest receive message to reset if necessary
        current_time = rospy.get_rostime()
        if current_time - self.last_time_message > self.max_time_reset:
            # save previous log
            self.reba.save_log()
            self.reset_stream()
        self.last_time_message = current_time
        # calculate the reba score
        reba_score = self.reba.assess_posture(msg.position, msg.name)
        # add the value to the buffer
        self.reba_buffer.append(reba_score)
        if len(self.reba_buffer) == self.buffer_size:
            reba_avg = np.mean(self.reba_buffer)
            self.reba_values.append(reba_avg)
            # stream the data to Plotly
            self.plot_stream.write(dict(x=len(self.reba_values), y=reba_avg))
            # clean the buffer
            self.reba_buffer = []

    def run(self):
        rospy.Subscriber('/human/set_joint_values', JointState, reba_calc.handle_joint_state_msgs)
        rospy.spin()
        # save the log
        self.reba.save_log()
        # close plotly stream
        self.plot_stream.close()

if __name__ == '__main__':
    rospy.init_node('reba_calculator')
    reba_calc = RebaCalculator()
    reba_calc.run()
