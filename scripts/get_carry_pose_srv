#!/usr/bin/env python
import rospy
from thr_infrastructure_msgs.srv import GetCarryPose, GetCarryPoseResponse
from geometry_msgs.msg import PoseStamped
import yaml
import rospkg
import transformations
import json
import tf


class CarryPoseSrv(object):
    def __init__(self, debug=False):
        self.rospack = rospkg.RosPack()
        self.tfl = tf.TransformListener()
        self.tfb = tf.TransformBroadcaster()
        rospy.Service('thr/get_carry_pose', GetCarryPose, self.handle_carry_pose_requests)
        self.debug = debug
        self.init_poses()

    def init_poses(self):
        # get fixed pose from config file
        pkg_dir = self.rospack.get_path('reba_optim')
        with open(pkg_dir + '/config/fixed_pose.yaml', 'r') as datafile:
            data = yaml.load(datafile)
        # convert data to PoseStamped
        self.fixed_pose = data

        self.human_poses = {}
        # calculate relative pose from torso and arm length
        human_lengths = rospy.get_param('/human/lengths')
        x = 2.0 / 3.0 * (human_lengths['forearm_length'] + human_lengths['upper_arm_length'])
        y = 0.1
        z = human_lengths['spine_down_length'] + human_lengths['spine_up_length']
        # get orientation from demonstration
        with open(pkg_dir + '/config/relative_pose.json') as datafile:
            poses = json.load(datafile)
        # add it to the dictionnary of poses
        self.human_poses['relative'] = {}
        self.human_poses['relative']['right'] = [[x, -y, z], poses['right'][1]]
        self.human_poses['relative']['left'] = [[x, y, z], poses['left'][1]]

        # get reba pose from config file
        with open(pkg_dir + '/config/reba_pose.json') as datafile:
            self.human_poses['reba'] = json.load(datafile)

        # account for x difference
        # self.human_poses['reba'][rospy.get_param('/human/laterality')][0][0] -= 0.1

        # write the file of poses
        with open(pkg_dir + '/tmp/dict_pose.json', 'w') as outfile:
            json.dump(self.human_poses, outfile, sort_keys=True, indent=4)

    def handle_carry_pose_requests(self, req):
        if req.method == 'fixed':
            pose = self.fixed_pose
            fixed = True
        else:
            try:
                self.tfl.waitForTransform('base', 'tracker/human/base', rospy.Time(), rospy.Duration(0.5))
                BaseTHuman = self.tfl.lookupTransform('base', 'tracker/human/base', rospy.Time(0))
                # get the humand hand wrt to human base
                laterality = rospy.get_param('/human/laterality')
                HumanTHand = self.human_poses[req.method][laterality]
                # apply chain rule of transformations
                pose = transformations.multiply_transform(BaseTHuman, HumanTHand)
                if self.debug:
                    self.tfb.sendTransform(pose[0], pose[1], rospy.Time.now(), '/des_pose', '/base')
                fixed = False
            except Exception as e:
                print e
                success = False
                fixed = False
                pose = PoseStamped()
                return GetCarryPoseResponse(success=success, fixed_pose=fixed, hand_pose=pose)

        # convert pose to PoseStamped
        pose_stamped = transformations.list_to_pose(pose)
        pose_stamped.header.frame_id = 'base'
        pose_stamped.header.stamp = rospy.get_rostime()
        success = True

        return GetCarryPoseResponse(success=success, fixed_pose=fixed, hand_pose=pose_stamped)

    def run(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('get_carry_pose_srv')
    try:
        laterality = rospy.get_param('/human/laterality')
    except KeyError:
        # ask subject laterality
        laterality = ''
        while (laterality != 'right' and laterality != 'left') and not rospy.is_shutdown():
            rospy.sleep(2)
            rospy.logwarn('Laterality not defined. What is the subject laterality?')
            laterality = raw_input()
        if not rospy.is_shutdown():
            rospy.set_param('/human/laterality', laterality)
    c = CarryPoseSrv()
    print "Ready to receive carry request"
    c.run()
