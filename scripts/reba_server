#!/usr/bin/env python
import rospy
from reba_optim.srv import RebaPose, RebaPoseResponse
import numpy as np
import tf
import rospkg
import transformations
from threading import Lock
import sys

class RebaServer(object):
    def __init__(self, rate, arm_axe=None):
        if arm_axe is None:
            arm_axe = [0,-0.5,0]
        self.tf_arm_axe = (arm_axe,[0,0,0,1])
        self.tf_hand = []
        self.tf_hand.append(rospy.get_param('/reba/hand_over_location/left'))
        self.tf_hand.append(rospy.get_param('/reba/hand_over_location/right'))
        self.tfl = tf.TransformListener()
        self.tfb = tf.TransformBroadcaster()
        self.rate = rospy.Rate(rate)
        self.tf_hand_over = ([0,0,0],[0,0,0,1])
        self.tf_hip_record = ([0,0,0],[0,0,0,1])
        self.tf_hip_adapted = ([0,0,0],[0,0,0,1])
        self.lock = Lock()

    def calculate_hand_over(self, tf_hip, side=0):
        # multiply the two tf
        tf_hand_over = transformations.multiply_transform(tf_hip, self.tf_hand[side])
        # transform it into vrep format by a pi/2 y rotation
        tf_vrep = ([0.,0.,0.],[0.,0.70710678,0.,0.70710678])
        tf_hand_over = transformations.multiply_transform(tf_hand_over, tf_vrep)
        with self.lock:
            self.tf_hand_over = tf_hand_over
        return tf_hand_over

    def adapt_hip_orientation(self, tf_hip):
        t = tf_hip[0]
        g = np.array([self.tf_arm_axe[0][0]-t[0],self.tf_arm_axe[0][1]-t[1],0])
        x = g/np.linalg.norm(g)
        z = [0,0,1]
        y = np.cross(z,x)
        x = np.array([x]).reshape(3,1)
        y = np.array([y]).reshape(3,1)
        z = np.array([z]).reshape(3,1)
        t = np.array([t]).reshape(3,1)
        R = np.hstack((x,y,z,t))
        R = np.vstack((R,[0,0,0,1]))
        tf_out = transformations.m4x4_to_list(R)
        return tf_out

    def cb_reba_request_received(self, reba_pose_req):
        # read tf from VREP to hip
        tf_hip = transformations.pose_to_list(reba_pose_req.hip_pose)
        side = reba_pose_req.prefered_hand_to_handover
        # adapt the hip orientation
        self.tf_hip_record = tf_hip 
        self.tf_hip_adapted = self.adapt_hip_orientation(tf_hip)
        # calculate the hand_over pose
        self.calculate_hand_over(self.tf_hip_adapted, side=side)
        # create the Pose response
        pose = transformations.list_to_pose(self.tf_hand_over).pose
        return RebaPoseResponse(hand_over_location=pose, hand_to_handover=side)

    def publish_handover(self):
        # publish the transformation
        self.tfb.sendTransform(self.tf_hand_over[0], self.tf_hand_over[1], rospy.Time.now(), '/vrep/hand_over', '/vrep_frame')
        self.tfb.sendTransform(self.tf_arm_axe[0], self.tf_arm_axe[1], rospy.Time.now(), '/vrep/arm_axe', '/vrep_frame')
        self.tfb.sendTransform(self.tf_hip_record[0], self.tf_hip_record[1], rospy.Time.now(), '/vrep/hip_record', '/vrep_frame')
        self.tfb.sendTransform(self.tf_hip_adapted[0], self.tf_hip_adapted[1], rospy.Time.now(), '/vrep/hip_adapted', '/vrep_frame')
    
    def update_handovers(self):
        # get hip pose
        if self.tfl.canTransform('/vrep_frame', '/human/hip', rospy.Time(0)):
            # adapt the hip orientation
            tf_hip = self.tfl.lookupTransform('/vrep_frame', '/human/hip', rospy.Time(0))
            # calculate the hand_over pose
            tf_right = self.calculate_hand_over(tf_hip, 0)
            tf_left = self.calculate_hand_over(tf_hip, 1)
            self.tfb.sendTransform(tf_right[0], tf_right[1], rospy.Time.now(), '/vrep/hand_over/right', '/vrep_frame')
            self.tfb.sendTransform(tf_left[0], tf_left[1], rospy.Time.now(), '/vrep/hand_over/left', '/vrep_frame')

    def run(self, continous_publish=False):
        rospy.Service('/reba/get_reba', RebaPose, self.cb_reba_request_received)
        rospy.loginfo('REBA server running...')
        if continous_publish:
            while not rospy.is_shutdown():
                self.update_handovers()
                self.rate.sleep()
        else:
            while not rospy.is_shutdown():
                self.publish_handover()
                self.rate.sleep()

if __name__ == "__main__":
    rospy.init_node('reba_server')
    reba = RebaServer(10)
    reba.run(sys.argv[1]=='True')
    