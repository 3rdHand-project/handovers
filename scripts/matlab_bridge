#!/usr/bin/env python
import rospy
import os.path
from reba_optim.srv import TrajectoryFromReba, TrajectoryFromRebaResponse
from trajectory_msgs.msg import JointTrajectoryPoint, JointTrajectory
import transformations
import glob

class MatlabBridge:
    def __init__(self, matlab_flag='flagMatlabFinished.txt', ros_flag='flagROSfinished.txt', shared_folder='/tmp/matlab_bridge/'):
        # create share_folder if necessary
        if not os.path.exists(shared_folder):
            os.makedirs(shared_folder)
        else:
            # delete the content of the folder
            for the_file in os.listdir(shared_folder):
                file_path = os.path.join(shared_folder, the_file)
                try:
                    if os.path.isfile(file_path):
                        os.unlink(file_path)
                except Exception, e:
                    print e 
        # set the flag path
        self.shared_folder = shared_folder
        self.matlab_flag = os.path.join(shared_folder,matlab_flag)
        self.ros_flag = os.path.join(shared_folder,ros_flag)
        # define trajectories files
        self.traj1_file = os.path.join(shared_folder,'traj1.txt')
        self.traj2_file = os.path.join(shared_folder,'traj2.txt')
        # define poses files
        self.poses_file = os.path.join(shared_folder,'posesFromROS.txt')
        # define save folder
        self.save_folder = '/tmp/reba_save/'
        if not os.path.exists(self.save_folder):
        	os.makedirs(self.save_folder)
        self.rate = rospy.Rate(10)
        self.robot_joint_names = ['right_s0', 'right_s1', 'right_e0', 'right_e1',
                                'right_w0', 'right_w1', 'right_w2']

    def is_matlab_flag_set(self):
        return os.path.isfile(self.matlab_flag)

    def set_ros_flag(self):
        open(self.ros_flag, 'a').close()

    def unset_matlab_flag(self):
        os.remove(self.matlab_flag)

    def wait_for_matlab_flag(self):
        rospy.loginfo('Waiting for Matlab flag to be set.')
        # loop until the flag is set
        while not rospy.is_shutdown() and not self.is_matlab_flag_set():
            self.rate.sleep()
        rospy.loginfo('Matlab flag on, reading trajectories.')
        # unset the flag
        self.unset_matlab_flag()

    def remove_trajectory_files(self):
        os.remove(self.traj1_file)
        os.remove(self.traj2_file)

    def write_poses_in_file(self, handOverLocation, viaPointLocation=None):
        def convert_to_string(pose):
            # create the string of the pose to write in the textfile
            pose_str = ''
            for lists in pose:
                for value in lists:
                    pose_str += str(value) + '\t' 
            pose_str += '\n'
            return pose_str
        # if no viapoint is given write a default
        if viaPointLocation is None:
            viaPointLocation = ([-999,-999,-999],[-999,-999,-999,-999])
        # create string for viapoint
        string_poses = convert_to_string(viaPointLocation)
        # create the string for handover
        string_poses += convert_to_string(handOverLocation)
        # write the string to the file
        with open(self.poses_file, 'w') as f:
            f.write(string_poses)
        # save it in the save folder
        list_save = glob.glob(self.save_folder+'run*')
 		save_file = os.path.join(self.save_folder, 'run'+str(len(list_save))+'.txt'
 		with open(save_file, 'w') as f:
            f.write(string_poses) 
        # set the ros flag
        self.set_ros_flag()

    def read_trajectory_files(self):
        rospy.loginfo('Reading trajectory.')

        def read_one_file(filename):
            trajectory = JointTrajectory()
            trajectory.joint_names = self.robot_joint_names
            with open(filename) as f:
                for line in f:
                    point = JointTrajectoryPoint()
                    for field_num, field in enumerate(line.split('\t')):
                        if field_num==0:
                            point.time_from_start = rospy.Duration(float(field))
                        elif field!='\n':
                            point.positions.append(float(field))
                    trajectory.points.append(point)
            return trajectory
        
        # wait for matlab flag
        self.wait_for_matlab_flag()
        traj1 = read_one_file(self.traj1_file)
        traj2 = read_one_file(self.traj2_file)

        rospy.loginfo('Finished reading trajectory.')
        # remove the files
        self.remove_trajectory_files()
        return traj1, traj2  

    def handle_trajectory_from_reba(self, req):
        rospy.loginfo('Received new trajectory query.')
        # get the requested pose
        handOverLocation = transformations.pose_to_list(req.hand_over_location)
        objectLocation = transformations.pose_to_list(req.object_location)
        # query the bridge for the trajectory
        self.write_poses_in_file(handOverLocation, objectLocation)
        # wait for the response
        traj1, traj2 = self.read_trajectory_files()
        # return the calculated trajectory
        rospy.loginfo('Sending trajectory.')
        return TrajectoryFromRebaResponse(trajectory_to_object=traj1,
                                          trajectory_to_handover=traj2)

    def run(self):
        # intialize ros srv
        rospy.Service('/reba/trajectory_from_reba', TrajectoryFromReba, self.handle_trajectory_from_reba)
        rospy.loginfo('Ready to receive trajectory queries.')
        # wait for queries
        rospy.spin()

if __name__ == "__main__":
    # initialize ros node
    rospy.init_node('matlab_bridge')
    # create Matlab bridge
    matlab = MatlabBridge()
    # run the service
    matlab.run()