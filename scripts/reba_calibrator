#!/usr/bin/env python
import rospy
from reba_optim.reba_optimization import RebaOptimization
import rospkg
import numpy as np
import tf
import json
# from visualization_msgs.msg import Marker

if __name__ == "__main__":
    rospy.init_node('reba_calibrator')
    rospack = rospkg.RosPack()
    # initialize tf
    tfl = tf.TransformListener()
    optim = RebaOptimization(cost_factors=[1, 200, 5, 0])
    rospy.loginfo('Calibrating the hand-over location.')
    # optimize the hand-over location with the specified parameters for both sides
    tf_hip = []
    side = ['right', 'left']
    # for i in range(2):
    # generate a random pose to start the optimization
    joints = np.zeros(len(optim.model.get_joint_names()))
    # get the pose of the object in world

    # hip_object_pose = tfl.lookupTransform('/human/hip', '/toolbox/handle', rospy.Time(0))
    # optim.object_pose = np.array(hip_object_pose[0])
    # optim.object_pose = np.array([0.75, -0.25, 0.5])
    # optim.set_screwing_parameters(0.42, 0.1)

    # define the message for object vizualization
    # pub_marker = rospy.Publisher("visualization_marker", Marker, queue_size=10)

    # marker = Marker()
    # marker.header.frame_id = "hip"
    # marker.header.stamp = rospy.get_rostime()
    # marker.type = Marker.CYLINDER
    # marker.action = Marker.ADD
    # marker.pose.position.x = optim.object_pose[0]
    # marker.pose.position.y = optim.object_pose[1]
    # marker.pose.position.z = optim.object_pose[2]
    # marker.pose.orientation.x = 0.0
    # marker.pose.orientation.y = 0.0
    # marker.pose.orientation.z = 0.0
    # marker.pose.orientation.w = 1.0
    # marker.scale.x = 2*optim.circle_rad
    # marker.scale.y = 2*optim.circle_rad
    # marker.scale.z = 0.1
    # marker.color.a = 1.0
    # marker.color.r = 0.0
    # marker.color.g = 1.0
    # marker.color.b = 0.0

    # by default hip and ankles angles are fixed
    fixed_joints = {}
    fixed_joints['right_hip_0'] = 0.
    fixed_joints['right_hip_1'] = 0.
    fixed_joints['right_hip_2'] = 0.
    fixed_joints['right_knee'] = 0.
    fixed_joints['right_ankle_0'] = 0.
    fixed_joints['right_ankle_1'] = 0.

    fixed_joints['left_hip_0'] = 0.
    fixed_joints['left_hip_1'] = 0.
    fixed_joints['left_hip_2'] = 0.
    fixed_joints['left_knee'] = 0.
    fixed_joints['left_ankle_0'] = 0.
    fixed_joints['left_ankle_1'] = 0.

    output_dict = {}
    for i in range(2):
        # optimize to find the pose of the hand
        res = optim.optimize_posture(joints, 'receive', side=i, nb_points=1, fixed_joints=fixed_joints)
        # calculate the forward kinematic
        js = optim.model.get_current_state()
        # set the new joint values
        js.position = res[-1]
        # add a small twist for the elbow
        # js.position[js.name.index(side[i]+'_elbow_1')] = (js.position[js.name.index(side[i]+'_elbow_1')] +
        #                                                   (-1)**(i+1)*1.0472)
        optim.model.send_state(js)
        # get the pose of the hand wrt to the base
        fk = optim.model.forward_kinematic(js)
        output_dict[side[i]] = fk[side[i] + '_hand']
    # write the config file
    rospack = rospkg.RosPack()
    pkg_dir = rospack.get_path("reba_optim")
    with open(pkg_dir + '/config/reba_pose.json', 'w') as outfile:
        json.dump(output_dict, outfile, sort_keys=True, indent=4)
